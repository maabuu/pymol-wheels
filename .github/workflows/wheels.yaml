
on:
  workflow_dispatch:
    inputs:
      pymol_version:
        description: "PyMOL version" # git tag
        required: false
        default: "latest" #
        type: string
      publish_to_pypi:
        description: "Publish to PyPI"
        required: false
        default: false
        type: boolean
      run_tests:
        description: "Run tests after building"
        required: false
        default: true
        type: boolean

env:
  PYMOL_VERSION: ${{ inputs.pymol_version || 'latest' }}

jobs:
  # --------------------------
  # Detect PyMOL version
  # --------------------------
  detect-version:
    name: Detect PyMOL Version
    runs-on: ubuntu-latest
    outputs:
      pymol_version: ${{ steps.version.outputs.version }}
      is_latest: ${{ steps.version.outputs.is_latest }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Determine PyMOL version
        id: version
        run: |
          if [ "${{ env.PYMOL_VERSION }}" = "latest" ]; then
            # Fetch latest tag from PyMOL upstream
            VERSION=$(curl -s https://api.github.com/repos/schrodinger/pymol-open-source/tags | jq -r '.[0].name // empty')

            if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
              echo "‚ùå Failed to fetch latest PyMOL version"
              exit 1
            fi

            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_latest=true" >> $GITHUB_OUTPUT

          else

            VERSION="${{ env.PYMOL_VERSION }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_latest=false" >> $GITHUB_OUTPUT

          fi
          echo "üîç Using PyMOL version: $VERSION"

  # --------------------------
  # Build Linux wheels
  # --------------------------
  build-linux:
    name: Build Linux wheels
    runs-on: ubuntu-22.04
    needs: detect-version
    timeout-minutes: 60

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: true

    steps:
      - name: Checkout PyMOL source
        uses: actions/checkout@v4
        with:
          repository: schrodinger/pymol-open-source
          ref: ${{ needs.detect-version.outputs.pymol_version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get --no-install-recommends install \
              catch2 \
              libfreetype6-dev \
              libglew-dev \
              libglm-dev \
              libmsgpack-dev \
              libnetcdf-dev \
              libpng-dev \
              libxml2-dev

      - name: Install collada2gltf
        run: |
          wget -nv https://anaconda.org/schrodinger/collada2gltf/2.1.4/download/linux-64/collada2gltf-2.1.4-h6bb024c_0.tar.bz2
          sudo tar xf collada2gltf-*.tar.bz2 -C / bin/collada2gltf

      - name: Get additional sources
        run: |
          git clone --depth 1 https://github.com/rcsb/mmtf-cpp.git
          cp -R mmtf-cpp/include/* include/

      - name: Build
        run: |
          pip install --upgrade pip
          pip install -v --config-settings testing=True '.[dev]'
        env:
          DEBUG: 1

      - name: Test
        if: ${{ inputs.run_tests }}
        run: |
          pymol -ckqy testing/testing.py --run all

      - name: Build wheel
        run: |
          pip install --upgrade pip build wheel
          python -m build --wheel
        env:
          DEBUG: 1

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pymol-wheel-linux-py${{ matrix.python-version }}
          path: $GITHUB_WORKSPACE/dist/*.whl

  # --------------------------
  # Build Windows wheels
  # --------------------------
  build-windows:
    name: Build Windows wheels
    runs-on: windows-latest
    needs: detect-version
    timeout-minutes: 60

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: true

    env:
      CONDA_ENV_NAME: "testing_env"

    steps:
      - name: Checkout PyMOL source
        uses: actions/checkout@v4
        with:
          repository: schrodinger/pymol-open-source
          ref: ${{ needs.detect-version.outputs.pymol_version }}

      - name: Install Miniforge
        run: |
          choco install miniforge3

      - name: Add conda to PATH
        run: |
          echo "$env:CONDA" | Out-File -Append -FilePath $env:GITHUB_PATH
          echo "$env:CONDA\Scripts" | Out-File -Append -FilePath $env:GITHUB_PATH

      - name: Set up Miniforge
        run: |
          conda init powershell
          conda create --name $env:CONDA_ENV_NAME -c conda-forge -c schrodinger `
              python=${{ matrix.python-version }} `
              pip `
              catch2=2.13.3 `
              collada2gltf `
              freetype `
              glew `
              glm `
              libpng `
              libxml2 `
              libnetcdf `
              -y

      - name: Get additional sources
        run: |
          conda activate $env:CONDA_ENV_NAME

          git clone --depth 1 https://github.com/rcsb/mmtf-cpp.git
          Copy-Item -Recurse -Path mmtf-cpp/include\* -Destination "$env:CONDA_PREFIX\Library\include"
          git clone --depth 1 --single-branch --branch cpp_master https://github.com/msgpack/msgpack-c.git
          Copy-Item -Recurse -Path msgpack-c/include\* -Destination "$env:CONDA_PREFIX\Library\include"

      - name: Build
        run: |
          conda activate $env:CONDA_ENV_NAME
          pip install -v --config-settings testing=True .[dev]
        env:
          DEBUG: 1

      - name: Test
        if: ${{ inputs.run_tests }}
        run: |
          conda activate $env:CONDA_ENV_NAME
          pymol -ckqy testing\testing.py --run all
        env:
          DEBUG: 1

      - name: Build wheel
        run: |
          conda activate $env:CONDA_ENV_NAME
          pip install --upgrade pip build wheel
          python -m build --wheel
        env:
          DEBUG: 1

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pymol-wheel-windows-py${{ matrix.python-version }}
          path: $GITHUB_WORKSPACE/dist/*.whl

  # --------------------------
  # Build macOS wheels
  # --------------------------
  build-macos:
    name: Build macOS wheels
    runs-on: ${{ matrix.os }}
    needs: detect-version
    timeout-minutes: 60

    strategy:
      matrix:
        os: [macos-13, macos-latest] # Intel and ARM64
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      fail-fast: true

    env:
      CONDA_ROOT: "/tmp/miniforge"
      CONDA_ENV_NAME: "testing_env"

    steps:
      - name: Checkout PyMOL source
        uses: actions/checkout@v4
        with:
          repository: schrodinger/pymol-open-source
          ref: ${{ needs.detect-version.outputs.pymol_version }}

      - name: Download Miniforge
        run: |
          if [ "${{ matrix.os }}" = "macos-13" ]; then
            ARCH="x86_64"
          else
            ARCH="arm64"
          fi
          curl -L -o $CONDA_ROOT.sh "https://github.com/conda-forge/miniforge/releases/download/24.11.0-0/Miniforge3-MacOSX-${ARCH}.sh"
          bash $CONDA_ROOT.sh -b -p $CONDA_ROOT

  github-release:
    name: Create GitHub Release
    needs: [detect-version, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -name "*.whl" -exec cp {} release-assets/ \;
          echo "Release assets:"
          ls -la release-assets/

      - name: Create GitHub release with wheels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const pymolVersion = '${{ needs.detect-version.outputs.pymol_version }}';
            const tagName = `pymol-open-source-${pymolVersion}`;
            const releaseName = `PyMOL ${pymolVersion} Wheels`;

            try {
              // Create the release
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: releaseName,
                body: `PyMOL ${pymolVersion} wheels built and ready for download!

            **PyMOL Version:** ${pymolVersion}
            **Source:** https://github.com/schrodinger/pymol-open-source/releases/tag/${pymolVersion}

            ## Installation

            Download the wheel file for your platform and install with:
            \`\`\`bash
            pip install pymol_open_source-${pymolVersion}-*.whl
            \`\`\`

            Or install from PyPI:
            \`\`\`bash
            pip install pymol-open-source
            \`\`\`

            ## What's included

            - Linux wheels (x86_64)
            - Windows wheels (x86_64)
            - macOS wheels (x86_64)
            - Python 3.9, 3.10, 3.11, 3.12, 3.13 support

            Built automatically from PyMOL upstream release using official build instructions.`,
                draft: false,
                prerelease: false
              });

              console.log('‚úÖ GitHub release created:', release.data.html_url);

              // Upload wheel files as release assets
              const assetsDir = './release-assets';
              const files = fs.readdirSync(assetsDir);

              for (const file of files) {
                if (file.endsWith('.whl')) {
                  const filePath = path.join(assetsDir, file);
                  const fileContent = fs.readFileSync(filePath);

                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.data.id,
                    name: file,
                    data: fileContent,
                  });

                  console.log(`‚úÖ Uploaded ${file} to release`);
                }
              }

            } catch (error) {
              if (error.message.includes('already_exists')) {
                console.log('‚ö†Ô∏è Release already exists, skipping creation');
              } else {
                console.error('‚ùå Failed to create GitHub release:', error.message);
                throw error;
              }
            }

  # --------------------------
  # Publish to PyPI
  # --------------------------
  publish:
    name: Publish Wheels to PyPI
    needs: [detect-version, build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.publish_to_pypi

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Combine all wheels
        run: |
          mkdir final_dist
          find dist -name "*.whl" -exec cp {} final_dist/ \;
          echo "Wheels to publish:"
          ls -la final_dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: final_dist
