name: release

on:
  # push:
  # pull_request:
  workflow_dispatch:
    inputs:
      pymol_version:
        description: "PyMOL version"
        required: false
        default: "dev"
        type: string
      build_run_id:
        description: "Build workflow run ID (optional - will use latest successful if not provided)"
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYMOL_VERSION: ${{ inputs.pymol_version || 'dev' }}

jobs:
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find latest successful build run
        id: find-build
        uses: ./.github/actions/find-build-run
        with:
          build_run_id: ${{ inputs.build_run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts from build workflow
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.find-build.outputs.run-id }}
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -name "*.whl" -exec cp {} release-assets/ \;
          # for file in release-assets/*.whl; do
          #   mv "$file" "${file/pymol/pymol_open_source}"
          # done
          echo "Release assets:"
          ls -la release-assets/

      - name: Create GitHub release with wheels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let releaseDate = new Date().toISOString().split('T')[0];
            let pymolVersion = '${{ needs.detect-version.outputs.pymol_version }}';
            if (pymolVersion === '' || pymolVersion === 'dev') {
              pymolVersion = 'latest';
            } else if (!pymolVersion || !/^[A-Za-z0-9._\-]+$/.test(pymolVersion)) {
              throw new Error(`Invalid pymolVersion: "${pymolVersion}". Aborting release.`);
            }
             const releaseName = `${releaseDate} latest wheels`;

            try {
              // Create the release
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: releaseDate,
                name: releaseName,
                make_latest: "true",
                body: `PyMOL ${pymolVersion} wheels built and ready for download.

            **Source:** https://github.com/schrodinger/pymol-open-source/

            ## Installation

            Download the wheel file for your platform and install with:
            \`\`\`bash
            pip install pymol-*.whl
            \`\`\`

            Or install from PyPI:
            \`\`\`bash
            pip install pymol-open-source
            \`\`\`

            ## What's included

            - Linux wheels (x86_64)
            - Windows wheels (x86_64)
            - macOS wheels (x86_64, arm64)
            - Python 3.9, 3.10, 3.11, 3.12, 3.13 support

            Built automatically from PyMOL upstream release using official build instructions.`,
                draft: false,
                prerelease: false
              });

              console.log('✅ GitHub release created:', release.data.html_url);

              // Upload wheel files as release assets
              const assetsDir = './release-assets';
              const files = fs.readdirSync(assetsDir);
              for (const file of files) {
                if (file.endsWith('.whl')) {
                  const filePath = path.join(assetsDir, file);
                  const fileContent = fs.readFileSync(filePath);

                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.data.id,
                    name: file,
                    data: fileContent,
                  });

                  console.log(`✅ Uploaded ${file} to release`);
                }
              }

            } catch (error) {
              if (error.message.includes('already_exists')) {
                console.log('⚠️ Release already exists, skipping creation');
              } else {
                console.error('❌ Failed to create GitHub release:', error.message);
                throw error;
              }
            }
