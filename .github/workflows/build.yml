name: Wheels CI

on:
  # push:
  # pull_request:
  workflow_dispatch:
    inputs:
      pymol_version:
        description: "PyMOL version"
        required: false
        default: "dev"
        type: string
      publish_to_pypi:
        description: "Publish wheels to PyPI"
        required: false
        default: false
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYMOL_VERSION: ${{ inputs.pymol_version || 'dev' }}

jobs:
  # --------------------------
  # Set version
  # --------------------------
  detect-version:
    name: Detect PyMOL Version
    runs-on: ubuntu-latest
    outputs:
      pymol_version: ${{ steps.version.outputs.version }}

    steps:
      - name: Determine PyMOL version
        id: version
        run: |
          if [ "${{ env.PYMOL_VERSION }}" = "dev" ]; then
            echo "🔍 Using latest commit."
            echo "" >> $GITHUB_OUTPUT
          elif [ "${{ env.PYMOL_VERSION }}" = "latest" ]; then
            VERSION=$(curl -s https://api.github.com/repos/schrodinger/pymol-open-source/tags | jq -r '.[0].name // empty')
            if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
              echo "❌ Failed to fetch latest PyMOL version"
              exit 1
            fi
            echo "🔍 Using PyMOL version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ "${{ env.PYMOL_VERSION }}" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            VERSION="${{ env.PYMOL_VERSION }}"
            # add "v" prefix if not present
            if [[ ! "$VERSION" =~ ^v ]]; then
              VERSION="v$VERSION"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ Invalid PYMOL_VERSION: '${{ env.PYMOL_VERSION }}'. Must be 'latest', 'dev', or a valid version number (e.g., '2.5', '2.5.1')."
            exit 1
          fi

  # --------------------------
  # Build Linux wheels
  # --------------------------
  build-Linux:
    runs-on: ubuntu-22.04
    needs: detect-version

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        # python-version: ["3.12"]

    steps:
      - name: Get source
        uses: actions/checkout@v4
        with:
          repository: schrodinger/pymol-open-source
          ref: ${{ needs.detect-version.outputs.pymol_version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get --no-install-recommends install \
              catch2 \
              libfreetype6-dev \
              libglew-dev \
              libglm-dev \
              libmsgpack-dev \
              libnetcdf-dev \
              libpng-dev \
              libxml2-dev
          wget -nv https://anaconda.org/schrodinger/collada2gltf/2.1.4/download/linux-64/collada2gltf-2.1.4-h6bb024c_0.tar.bz2
          sudo tar xf collada2gltf-*.tar.bz2 -C / bin/collada2gltf

      - name: Get additional sources
        run: |
          git clone --depth 1 https://github.com/rcsb/mmtf-cpp.git
          cp -R mmtf-cpp/include/* include/

      - name: Build
        run: |
          pip install --upgrade pip
          pip install -v --config-settings testing=True '.[dev]'
        env:
          DEBUG: 1

      - name: Test
        run: |
          pymol -ckqy testing/testing.py --run all

      - name: Build wheel
        run: |
          pip install --upgrade pip build wheel
          python -m build --wheel
        env:
          DEBUG: 1

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pymol-wheel-linux-py${{ matrix.python-version }}
          path: dist/*.whl

  # --------------------------
  # Build Windows wheels
  # --------------------------
  # build-Windows:
  #   runs-on: windows-latest
  #   needs: detect-version

  #   strategy:
  #     matrix:
  #       python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

  #   env:
  #     CONDA_ENV_NAME: "testing_env"

  #   steps:
  #     - name: Get source
  #       uses: actions/checkout@v4
  #       with:
  #         repository: schrodinger/pymol-open-source
  #         ref: ${{ needs.detect-version.outputs.pymol_version }}

  #     - name: Install Miniforge
  #       run: |
  #         choco install miniforge3

  #     - name: Add conda to PATH
  #       run: |
  #         echo "$env:CONDA" | Out-File -Append -FilePath $env:GITHUB_PATH
  #         echo "$env:CONDA\Scripts" | Out-File -Append -FilePath $env:GITHUB_PATH

  #     - name: Set up Miniforge
  #       run: |
  #         conda init powershell
  #         conda create --name $env:CONDA_ENV_NAME -c conda-forge -c schrodinger `
  #             python=${{ matrix.python-version }} `
  #             pip `
  #             catch2=2.13.3 `
  #             collada2gltf `
  #             freetype `
  #             glew `
  #             glm `
  #             libpng `
  #             libxml2 `
  #             libnetcdf `

  #     - name: Get additional sources
  #       run: |
  #         conda activate $env:CONDA_ENV_NAME

  #         git clone --depth 1 https://github.com/rcsb/mmtf-cpp.git
  #         Copy-Item -Recurse -Path mmtf-cpp/include\* -Destination "$env:CONDA_PREFIX\Library\include"
  #         git clone --depth 1 --single-branch --branch cpp_master https://github.com/msgpack/msgpack-c.git
  #         Copy-Item -Recurse -Path msgpack-c/include\* -Destination "$env:CONDA_PREFIX\Library\include"
  #         dir $env:CONDA_PREFIX\Library\include

  #     - name: Build PyMOL
  #       run: |
  #         conda activate $env:CONDA_ENV_NAME
  #         pip install -v --config-settings testing=True .[dev]

  #     - name: Test
  #       run: |
  #         conda activate $env:CONDA_ENV_NAME
  #         pymol -ckqy testing\testing.py --run all

  #     - name: Build wheel
  #       run: |
  #         conda activate $env:CONDA_ENV_NAME
  #         pip install --upgrade pip build wheel
  #         python -m build --wheel
  #       env:
  #         DEBUG: 1

  #     - name: Upload wheel
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: pymol-wheel-windows-py${{ matrix.python-version }}
  #         path: dist/*.whl

  # --------------------------
  # Build macOS wheels
  # --------------------------
  build-MacOS:
    runs-on: macos-latest
    needs: detect-version

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        # python-version: ["3.12"]

    env:
      CONDA_ROOT: "/tmp/miniforge"
      CONDA_ENV_NAME: "testing_env"

    steps:
      - name: Get source
        uses: actions/checkout@v4.0.0
        with:
          repository: schrodinger/pymol-open-source
          ref: ${{ needs.detect-version.outputs.pymol_version }}

      - name: Download Miniforge
        run: |
          curl -L -o $CONDA_ROOT.sh https://github.com/conda-forge/miniforge/releases/download/24.11.0-0/Miniforge3-MacOSX-x86_64.sh
          bash $CONDA_ROOT.sh -b -p $CONDA_ROOT

      - name: Add conda to PATH
        run: |
          echo "${CONDA_ROOT}/bin" >> "$GITHUB_PATH"

      - name: Set up Miniforge
        run: |
          conda create --name $CONDA_ENV_NAME -c conda-forge -c schrodinger \
              python=${{ matrix.python-version }} \
              pip \
              catch2=2.13.3 \
              collada2gltf \
              freetype \
              glew \
              glm \
              libpng \
              libxml2 \
              libnetcdf

      - name: Get additional sources
        run: |
          source activate $CONDA_ENV_NAME
          git clone --depth 1 https://github.com/rcsb/mmtf-cpp.git
          cp -R mmtf-cpp/include/* ${CONDA_PREFIX}/include/
          git clone --depth 1 --single-branch --branch cpp_master https://github.com/msgpack/msgpack-c.git
          cp -R msgpack-c/include/* ${CONDA_PREFIX}/include/

      - name: Build PyMOL
        run: |
          source activate $CONDA_ENV_NAME
          export MACOSX_DEPLOYMENT_TARGET=12.0
          pip install -v --config-settings testing=True '.[dev]'

      - name: Test
        run: |
          source activate $CONDA_ENV_NAME
          pymol -ckqy testing/testing.py --run all

      - name: Build wheel
        run: |
          source activate $CONDA_ENV_NAME
          export MACOSX_DEPLOYMENT_TARGET=12.0
          pip install --upgrade pip build wheel
          python setup.py bdist_wheel --testing=false

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: pymol-wheel-macos-${{ matrix.os == 'macos-13' && 'x86_64' || 'arm64' }}-py${{ matrix.python-version }}
          path: dist/*.whl

  github-release:
    name: Create GitHub Release
    needs:
      - detect-version
      - build-linux
      # - build-windows
      - build-macos
    runs-on: ubuntu-latest
    # if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -name "*.whl" -exec cp {} release-assets/ \;
          echo "Release assets:"
          ls -la release-assets/

      - name: Create GitHub release with wheels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let pymolVersion = '${{ needs.detect-version.outputs.pymol_version }}';
            if (pymolVersion === '' || pymolVersion === 'dev') {
              pymolVersion = 'latest';
            } else if (!pymolVersion || !/^[A-Za-z0-9._\-]+$/.test(pymolVersion)) {
              throw new Error(`Invalid pymolVersion: "${pymolVersion}". Aborting release.`);
            }
            const tagName = `pymol-open-source-${pymolVersion}`;
            const releaseName = `PyMOL ${pymolVersion} Wheels`;

            try {
              // Create the release
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: releaseName,
                body: `PyMOL ${pymolVersion} wheels built and ready for download!

            **PyMOL Version:** ${pymolVersion}
            **Source:** https://github.com/schrodinger/pymol-open-source/releases/tag/${pymolVersion}

            ## Installation

            Download the wheel file for your platform and install with:
            \`\`\`bash
            pip install pymol_open_source-${pymolVersion}-*.whl
            \`\`\`

            Or install from PyPI:
            \`\`\`bash
            pip install pymol-open-source
            \`\`\`

            ## What's included

            - Linux wheels (x86_64)
            - Windows wheels (x86_64)
            - macOS wheels (x86_64, arm64)
            - Python 3.9, 3.10, 3.11, 3.12, 3.13 support

            Built automatically from PyMOL upstream release using official build instructions.`,
                draft: false,
                prerelease: false
              });

              console.log('✅ GitHub release created:', release.data.html_url);

              // Upload wheel files as release assets
              const assetsDir = './release-assets';
              const files = fs.readdirSync(assetsDir);

              for (const file of files) {
                if (file.endsWith('.whl')) {
                  const filePath = path.join(assetsDir, file);
                  const fileContent = fs.readFileSync(filePath);

                  await github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.data.id,
                    name: file,
                    data: fileContent,
                  });

                  console.log(`✅ Uploaded ${file} to release`);
                }
              }

            } catch (error) {
              if (error.message.includes('already_exists')) {
                console.log('⚠️ Release already exists, skipping creation');
              } else {
                console.error('❌ Failed to create GitHub release:', error.message);
                throw error;
              }
            }
